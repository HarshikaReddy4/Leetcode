1. Start by initializing a pointer `current` to the head of the linked list.
2. Begin a loop that continues until `current` reaches the end of the list or the last node (when `current.next` is null).
3. Inside the loop, check if the value of the current node (`current.val`) is the same as the value of the next node (`current.next.val`).
   - If they are equal, it indicates a duplicate node.
     - In this case, update the `next` pointer of the current node to skip the duplicate node by setting `current.next` to `current.next.next`.
   - If they are not equal, move `current` to the next node in the list (`current = current.next`).
4. Repeat this process until all duplicate nodes are removed from the list.
5. Finally, return the head of the modified list.

Here's a step-by-step breakdown of the algorithm:

- Start from the head of the list.
- Check if the current node and its next node have the same value.
  - If they do, skip the next node by updating the `next` pointer of the current node.
  - If they don't, move to the next node.
- Continue this process until all duplicate nodes are removed.
- Return the head of the modified list.
